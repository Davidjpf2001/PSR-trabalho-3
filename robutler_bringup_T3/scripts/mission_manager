#!/usr/bin/env python3

from functools import partial
import rospy
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion, PoseStamped
from tf.transformations import quaternion_from_euler
from move_base_msgs.msg import MoveBaseActionResult

import cv2
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from ultralytics import YOLO
import math 

from geometry_msgs.msg import Twist
from colorama import Fore, Style

server = None
marker_pos = 1

menu_handler = MenuHandler()

h_first_entry = 0
h_mode_last = 0


def enableCb(feedback):
    handle = feedback.menu_entry_id
    state = menu_handler.getCheckState(handle)

    if state == MenuHandler.CHECKED:
        menu_handler.setCheckState(handle, MenuHandler.UNCHECKED)
        rospy.loginfo("Hiding first menu entry")
        menu_handler.setVisible(h_first_entry, False)
    else:
        menu_handler.setCheckState(handle, MenuHandler.CHECKED)
        rospy.loginfo("Showing first menu entry")
        menu_handler.setVisible(h_first_entry, True)

    menu_handler.reApply(server)
    rospy.loginfo("update")
    server.applyChanges()


def modeCb(feedback):
    global h_mode_last
    menu_handler.setCheckState(h_mode_last, MenuHandler.UNCHECKED)
    h_mode_last = feedback.menu_entry_id
    menu_handler.setCheckState(h_mode_last, MenuHandler.CHECKED)

    rospy.loginfo("Switching to menu entry #" + str(h_mode_last))
    menu_handler.reApply(server)
    print("DONE")
    server.applyChanges()


def makeBox(msg):
    marker = Marker()

    marker.type = Marker.SPHERE
    marker.scale.x = msg.scale * 0.45
    marker.scale.y = msg.scale * 0.45
    marker.scale.z = msg.scale * 0.45
    marker.color.r = 0.5
    marker.color.g = 0.5
    marker.color.b = 0.5
    marker.color.a = 0.2

    # #Bola transparente em cima do robo, para parecer que estamos a carregar no robo
    # marker.type = Marker.SPHERE
    # marker.scale.x = msg.scale * 0.6  
    # marker.scale.y = msg.scale * 0.6
    # marker.scale.z = msg.scale * 0.6
    # marker.color.r = 0
    # marker.color.g = 0
    # marker.color.b = 0  
    # marker.color.a = 0  # opacity


    return marker


def makeBoxControl(msg):
    control = InteractiveMarkerControl()
    control.always_visible = True
    control.markers.append(makeBox(msg))
    msg.controls.append(control)
    return control


def makeEmptyMarker(dummyBox=True):
    global marker_pos
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = "base_link"

    int_marker.pose.position.z = marker_pos
    marker_pos += 1
   
    # int_marker.pose.position.z = 0  #posição de altura 0, ou seja sobreposto ao robo, para parecer que estamos a carregar no robo

    int_marker.scale = 1
    return int_marker


def makeMenuMarker(name):
    int_marker = makeEmptyMarker()
    int_marker.name = name

    control = InteractiveMarkerControl()

    control.interaction_mode = InteractiveMarkerControl.BUTTON
    control.always_visible = True

    control.markers.append(makeBox(int_marker))
    int_marker.controls.append(control)

    server.insert(int_marker)


def deepCb(feedback):
    rospy.loginfo("The deep sub-menu has been found.")


def moveTo(feedback, x, y, z, R, P, Y, location, detects, goal_publisher):

    print('Called moving to ' + location)
    p = Pose()
    p.position = Point(x=x, y=y, z=z)
    q = quaternion_from_euler(R, P, Y)  # From euler angles (rpy) to quaternion
    p.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

    ps = PoseStamped()
    ps.pose = p
    ps.header = Header(frame_id='map', stamp=rospy.Time.now())

    print('Sending Goal move to ' + location)
    goal_publisher.publish(ps)

    # TODO know when move is finished

    try:
        result_msg = rospy.wait_for_message('/move_base/result', MoveBaseActionResult, timeout=60)
    except:
        print('Timeout waiting for moveto')
        # TODO
        return

    
    print('move base completed goal with result ' + str(result_msg))
    
    if detects == 1:
        
        image_subscriber = ImageSubscriber()
        image_subscriber.set_detect(True) 
        for i in range(12):
            
            rotation_goal = PoseStamped()
            rotation_goal.header.frame_id = 'base_link'
            rotation_goal.pose.position.x = 0
            rotation_goal.pose.position.y = 0
            rotation_goal.pose.position.z = 0

            q = quaternion_from_euler(0, 0, 1)
            rotation_goal.pose.orientation = Quaternion(*q)

            goal_publisher.publish(rotation_goal)

            rospy.sleep(1.2)

        
        rospy.sleep(20.0)

        obj = image_subscriber.det

        image_subscriber.set_detect(False)

        rospy.sleep(2.0)

        if obj == 0:
            print('\n')
            print(Fore.BLUE + '---------------------------------------')
            print(Fore.BLUE + 'There is no one in the room')
            print(Fore.BLUE + '---------------------------------------')
            print('\n')
        else:
            print('\n')
            print(Fore.GREEN + '---------------------------------------')
            print(Fore.GREEN + 'People detected in the room')
            print(Fore.GREEN + '---------------------------------------' + Style.RESET_ALL)
            print('\n')
             

def detect(img, bol):

    obj = 0

    
    # model
    model = YOLO("yolo-Weights/yolov8n.pt")

    # object classes
    classNames = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat",
                "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat",
                "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella",
                "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat",
                "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
                "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli",
                "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed",
                "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone",
                "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors",
                "teddy bear", "hair drier", "toothbrush"
                ]

    
    results = model(img, stream=True)
    

    # coordinates
    for r in results:
        boxes = r.boxes
        i=+1
        
        for box in boxes:

            confidence = math.ceil((box.conf[0]*100))/100
            
            cls = int(box.cls[0])
            
            x1, y1, x2, y2 = box.xyxy[0]
            x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2) # convert to int values

            area = math.fabs(x2-x1)*math.fabs(y2-y1)
            

            if classNames[cls] == 'person' and area > 50000:
                print("Confidence --->",confidence)
                print(Fore.GREEN +'Person Detected'+ Style.RESET_ALL)
                
                obj =+ 1
                
    return obj 
        

class ImageSubscriber:
    def __init__(self):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber('/camera/rgb/image_raw_arm', Image, self.image_callback)
        self.bol = False
        self.det = 0

    def image_callback(self, data):
        try:
            if self.bol is True:
                cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
                obj = detect(cv_image, self.bol)
    
                self.det = self.det + obj

        except Exception as e:
            rospy.logerr(f"Erro ao converter imagem: {str(e)}")

    def set_detect(self, value):
        self.bol = value
    
    def objects(self, obj):
        self.det = obj

def main():

    global server
    

    # -------------------------------
    # Initialization
    # -------------------------------
    rospy.init_node("mission_manager")

    # Create move_base_simple/goal publisher
    goal_publisher = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=1)

    server = InteractiveMarkerServer("mission")
    print(server)

    global h_first_entry, h_mode_last
    h_first_entry = menu_handler.insert("Move to")
    detect_first_entry = menu_handler.insert("Detect person")

    entry = menu_handler.insert("kitchen", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=6.870983, y=-2.779104, z=0,
                                                 R=-0.000004, P=0.003169, Y=1.552833,
                                                 location='kitchen',
                                                 detects = 0,
                                                 goal_publisher=goal_publisher))

    entry = menu_handler.insert("bedroom", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-6.126462, y=0.479290, z=0,
                                                 R=-0.000004, P=0.003169, Y=0.479290,
                                                 location='bedroom',
                                                 detects = 0,
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("back of the bedroom", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=-6.117574, y=-3.438049, z=0,
                                                 R=-0.000003, P=0.003169, Y=0.003170,
                                                 location='back of the bedroam',
                                                 detects = 0,
                                                 goal_publisher=goal_publisher))

    
    entry = menu_handler.insert("living room", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=1.171529, y=-0.293936, z=0,
                                                 R=0, P=0.003169, Y=0.029805,
                                                 location='living room',
                                                 detects = 0,
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("gym", parent=h_first_entry,
                                callback=partial(moveTo,
                                                 x=1.850679, y=3.438049, z=0,
                                                 R=-0.000003, P=0.003190, Y=1.827550,
                                                 location='gym',
                                                 detects = 0,
                                                 goal_publisher=goal_publisher))
    
    entry = menu_handler.insert("bedroom", parent=detect_first_entry,
                                callback=partial(moveTo,
                                                 x=-6.313216, y=-0.371866, z=0,
                                                 R=0.000004, P=0.003169, Y=4.479290,
                                                 location='bedroom',
                                                 detects = 1,
                                                 goal_publisher=goal_publisher))

    # entry = menu_handler.insert("living room", parent=h_first_entry, callback=moveToLivingRoom)

    

    makeMenuMarker("marker1")

    menu_handler.apply(server, "marker1")
    server.applyChanges()

    rospy.spin()


if __name__ == '__main__':
    main()




